# Keeping GA as days not weeks causes an error from mecor: "There has been a warning from the lme4 package while fitting the linear mixed model to obtain maximum likelihood esitmates: Some predictor variables are on very different scales: consider rescaling" that is triggered by I(gestational_age^2) variable in the RC formula
mutate(gestational_age = gestational_age / 7)
# Transform data to wide format (to be processed by the mecor package)
# Second trimester
US2_data <- model_data_calibration %>%
dplyr::filter(trimester == "US2") %>%
tidyr::pivot_wider(id_cols = -outcome_val,
names_from = c(outcome, trimester),
values_from = c(outcome_val_sd)) %>%
# Rename t2 and t3 exposure variables so t2 is the 'primary sample' and t3 is a 'replicate'
# NOTE: In theory, for the MLE method, the order of the replicates does not matter. This means that the naming is only symbolic and log_BPA and log_BPA_rep have the same importance
# However, the order of the naming matters for the uncorrected estimates obtained with mecor, if we want to compare them to the estimates obtained by linear regression (as in LM t2 will predict US2 and t3 will predict US3 and birth outcomes)
dplyr::rename_at(dplyr::vars(log_BPA_t2:log_PRPA_t2), function(x) stringr::str_replace(x, "_t2", "")) %>%
dplyr::rename_at(dplyr::vars(log_BPA_t3:log_PRPA_t3), function(x) stringr::str_replace(x, "_t3", "_rep")) %>%
purrr::set_names(~stringr::str_replace_all(., "_US2", ""))
# Third trimester
US3_data <- model_data_calibration %>%
dplyr::filter(trimester == "US3") %>%
tidyr::pivot_wider(id_cols = -outcome_val,
names_from = c(outcome, trimester),
values_from = c(outcome_val_sd)) %>%
# Rename t3 and t2 exposure variables so t3 is the 'primary sample' and t2 is a 'replicate'
dplyr::rename_at(dplyr::vars(log_BPA_t3:log_PRPA_t3), function(x) stringr::str_replace(x, "_t3", "")) %>%
dplyr::rename_at(dplyr::vars(log_BPA_t2:log_PRPA_t2), function(x) stringr::str_replace(x, "_t2", "_rep")) %>%
purrr::set_names(~stringr::str_replace_all(., "_US3", ""))
# Birth
birth_data <- model_data_calibration %>%
dplyr::filter(trimester == "birth") %>%
tidyr::pivot_wider(id_cols = -outcome_val,
names_from = c(outcome, trimester),
values_from = c(outcome_val_sd)) %>%
# Rename t3 and t2 exposure variables so t3 is the 'primary sample' and t2 is a 'replicate'
dplyr::rename_at(vars(log_BPA_t3:log_PRPA_t3), function(x) stringr::str_replace(x, "_t3", "")) %>%
dplyr::rename_at(vars(log_BPA_t2:log_PRPA_t2), function(x) stringr::str_replace(x, "_t2", "_rep")) %>%
purrr::set_names(~stringr::str_replace_all(., "_birth", ""))
# # Set a seed
# seed <- 632739
#
# # Regression calibration uses information from both t2 and t3 exposure (and the chronological order of exposure sampling does not matter, so both t2 and t3 can be replicates). This means that N for US2 will be higher than for the uncorrected models that take into account only information from t2 (in contrast to US3 and birth that use information from the averaged T2 and T3, so N will be equal with regression calibration). Therefore, for US2 the IDs for uncorrected models will be unified based on N for any exposure per outcome (as there is no difference in N between phenols, it is only different in regard to the outcome)
#
# # Second trimester
# regr_calibration_US2 <- RegrCalibration(outcomes = outcomes_US2_US3,
#                                         exposures = expo_names_nocat,
#                                         data = US2_data,
#                                         confounders = confounders,
#                                         confounders_dummy = paste(c(confounders_num, confounders_cat)),
#                                         method = "mle",
#                                         seed = seed,
#                                         B = 100,
#                                         US2 = TRUE) %>%
#   # This 'US2' argument will allow to correct the inflated N
#   # (see above for explanation)
#
#   dplyr::mutate(trimester = "US2")
#
# # Third trimester
# regr_calibration_US3 <- RegrCalibration(outcomes = outcomes_US2_US3,
#                                         exposures = expo_names_nocat,
#                                         data = US3_data,
#                                         confounders = confounders,
#                                         confounders_dummy = paste(c(confounders_num, confounders_cat)),
#                                         method = "mle",
#                                         seed = seed,
#                                         B = 100) %>%
#   mutate(trimester = "US3")
#
# # Birth
# regr_calibration_birth <- RegrCalibration(outcomes = outcomes_birth,
#                                           exposures = expo_names_nocat,
#                                           data = birth_data,
#                                           confounders = confounders,
#                                           confounders_dummy = paste(c(confounders_num, confounders_cat)),
#                                           method = "mle",
#                                           seed = seed,
#                                           B = 100) %>%
#   dplyr::mutate(trimester = "birth")
#
# regr_calibr_result <- rbind(regr_calibration_US2, regr_calibration_US3, regr_calibration_birth)
# saveRDS(regr_calibr_result, here::here(path_main, "regr_calibr_MLE_100BS.RDS"))
regr_calibr_result <- readRDS(here::here(path_main, "regr_calibr_MLE_100BS.RDS"))
regr_calibr_result_corr <- regr_calibr_result %>%
dplyr::mutate_at(dplyr::vars(exp, outcome, calibration, trimester), as.character) %>%
dplyr::arrange(trimester, exp) %>%
# Add term variable so the output can be processed by PrintTab
dplyr::mutate(term = "exp_val") %>%
# Select corrected results only
dplyr::filter(calibration == "corr")
model_tab_reg_cal_corr <- sapply(X = exposures_long_nocat, FUN = PrintTab, model_output = regr_calibr_result_corr, simplify = FALSE, USE.NAMES = TRUE)
res_reg_cal_corr <- purrr::map_df(model_tab_reg_cal_corr, ~as.data.frame(.x), .id = "exposure")
# The uncorrected results for regression calibration must be the same for T2 -> US2 scenario from the main model. For US3 and birth it differs as for the main model averaged T2 and T3 exposure is used and for RC it is T3 only
compare_dates <- inner_join(clean_urine_dates, clean_ultrasound_dates, by = "ident") %>%
dplyr::mutate(diff_T2 = US2_date - urine_date_T2,
diff_T3 = US3_date - urine_date_T3)
compare_dates <- compare_dates[rowSums(is.na(compare_dates[, 6:7])) != 2, ]
ident_US2_rev_dates <- compare_dates %>%
dplyr::filter(diff_T2 < 0) %>%
dplyr::pull(ident)
ident_US3_rev_dates <- compare_dates %>%
dplyr::filter(diff_T3 < 0) %>%
dplyr::pull(ident)
model_data_long_exam_dates_cont <- model_data_long_main_cont %>%
# Restrict data to T2 only & remove individuals with reversed exam dates
dplyr::filter((trimester == "US2" & !ident %in% ident_US2_rev_dates) | ((trimester == "US3" | trimester == "birth") & !ident %in% ident_US3_rev_dates))
model_data_long_exam_dates_cat <- model_data_long_main_cat %>%
# Restrict data to T2 only & remove individuals with reversed exam dates
dplyr::filter((trimester == "US2" & !ident %in% ident_US2_rev_dates) | ((trimester == "US3" | trimester == "birth") & !ident %in% ident_US3_rev_dates))
# Continuous exposures
model_output_exam_dates_cont <- ComputeGrowthModels(model_data_long = model_data_long_exam_dates_cont)
model_tab_exam_dates_cont <- sapply(X = exposures_long_nocat, FUN = PrintTab, model_output = model_output_exam_dates_cont, simplify = FALSE, USE.NAMES = TRUE)
res_exam_dates_cont <- purrr::map_df(model_tab_exam_dates_cont, ~as.data.frame(.x), .id = "exposure")
# Categorical exposures
model_output_exam_dates_cat <- ComputeGrowthModels(model_data_long = model_data_long_exam_dates_cat, cat = TRUE)
model_tab_exam_dates_cat <- sapply(X = exposures_long_cat, FUN = PrintTab, model_output = model_output_exam_dates_cat, cat = TRUE, simplify = FALSE, USE.NAMES = TRUE)
res_exam_dates_cat <- purrr::map_df(model_tab_exam_dates_cat, ~as.data.frame(.x), .id = "exposure")
# Combine cont and cat datasets ---- 39,464 x 18
model_data_long_main <- model_data_long_main_cat %>%
dplyr::mutate(exp_val = as.numeric(exp_val)) %>%
dplyr::bind_rows(model_data_long_main_cont)
# Display sample size per outcome
Appendix_Table_1 <- model_data_long_main %>%
dplyr::mutate(outcome_val = dplyr::case_when(outcome == "birth_length" ~ outcome_val * 10,
TRUE ~ outcome_val)) %>%
dplyr::group_by(exp, trimester, outcome) %>%
dplyr::select(-period_rank) %>%
na.omit() %>%
dplyr::summarise(n = length(outcome_val),
mean_out = round(mean(outcome_val), 2),
sd_out = round(sd(outcome_val), 2),
GA = round(median(gestational_age / 7), 2)
) %>%
dplyr::mutate(mean_sd_out = stringr::str_c(mean_out," (", sd_out, ")"),
trimester = factor(trimester, levels = c("US2", "US3", "birth"))) %>%
dplyr::ungroup() %>%
dplyr::select(outcome, trimester, GA, mean_sd_out, n) %>%
dplyr::arrange(trimester, outcome) %>%
dplyr::group_by(trimester) %>%
dplyr::distinct(outcome, .keep_all = TRUE)
Appendix_Table_1
utils::write.csv(Appendix_Table_1, here::here(path_main, "tables/Appendix_Table_1.csv"), row.names = FALSE)
# Combine results into one table
res <- res_combined %>%
dplyr::mutate(exposure = factor(exposure, levels = exposures_long)) %>%
dplyr::arrange(exposure, tri_out, term) %>%
dplyr::mutate(
p_value_head_circumference = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_head_circumference,
TRUE ~ p_value_head_circumference),
p_value_abdominal_circumference = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_abdominal_circumference,
TRUE ~ p_value_abdominal_circumference),
p_value_biparietal_diameter = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_biparietal_diameter,
TRUE ~ p_value_biparietal_diameter),
p_value_femur_length = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_femur_length,
TRUE ~ p_value_femur_length),
p_value_birth_weight = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_birth_weight,
TRUE ~ p_value_birth_weight),
p_value_birth_length = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_birth_length,
TRUE ~ p_value_birth_length)) %>%
dplyr::select(-contains(c("int_sign", "contrast", "main_eff")))
dplyr::select(res, exposure, tri_out, dplyr::contains("p_value")) %>%
dplyr::filter(tri_out == "US2") %>%
tidyr::pivot_longer(cols = -c(exposure, tri_out),
names_to = "p_val",
values_to = "p_val_val") %>%
dplyr::arrange(p_val_val) # Th lowest p-value for US2 was 0.3
Appendix_Table_2 <- res
utils::write.csv(Appendix_Table_2, here::here(path_main, "tables/Appendix_Table_2.csv"), row.names = FALSE)
Appendix_Table_2
# Combine results into one table
Appendix_Table_3 <- res_inter %>%
dplyr::mutate(exposure = factor(exposure, levels = exposures_long)) %>%
dplyr::mutate(term = factor(term,
levels = c("exp_val", "exp_valLOD-LOQ", "exp_val>LOQ"),
labels = c("continuous", "LOD-LOQ", ">LOQ"))) %>%
dplyr::arrange(exposure, tri_out, term, child_sex) %>%
dplyr::mutate(
p_value_head_circumference = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_head_circumference,
TRUE ~ p_value_head_circumference),
p_value_abdominal_circumference = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_abdominal_circumference,
TRUE ~ p_value_abdominal_circumference),
p_value_biparietal_diameter = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_biparietal_diameter,
TRUE ~ p_value_biparietal_diameter),
p_value_femur_length = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_femur_length,
TRUE ~ p_value_femur_length),
p_value_birth_weight = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_birth_weight,
TRUE ~ p_value_birth_weight),
p_value_birth_length = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_birth_length,
TRUE ~ p_value_birth_length)) %>%
dplyr::select(-contains(c("contrast", "main_eff")))
Appendix_Table_3 <- Appendix_Table_3
utils::write.csv(Appendix_Table_3, here::here(path_main, "tables/Appendix_Table_3.csv"), row.names = FALSE)
Appendix_Table_3
Appendix_Table_5 <- res_reg_cal_corr %>%
dplyr::select(-term, -dplyr::contains("int_sign"), -dplyr::contains("p_value"))
utils::write.csv(Appendix_Table_5, here::here(path_main, "tables/Appendix_Table_5.csv"), row.names = FALSE)
Appendix_Table_5
Appendix_Table_6 <- res_nosd %>%
dplyr::mutate(exposure = factor(exposure, levels = exposures_nosd)) %>%
dplyr::select(-term, -dplyr::contains("int_sign")) %>%
dplyr::arrange(exposure, tri_out)
utils::write.csv(Appendix_Table_5, here::here(path_main, "tables/Appendix_Table_6.csv"), row.names = FALSE)
Appendix_Table_6
# Combine results into one table
res_exam_dates <- dplyr::bind_rows(res_exam_dates_cont, res_exam_dates_cat) %>%
dplyr::mutate(exposure = factor(exposure, levels = exposures_long)) %>%
dplyr::arrange(exposure, tri_out, term) %>%
dplyr::mutate(
# For categorical exposures, replace p value calculated for each level by the main effect p value (anova)
p_value_head_circumference = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_head_circumference,
TRUE ~ p_value_head_circumference),
p_value_abdominal_circumference = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_abdominal_circumference,
TRUE ~ p_value_abdominal_circumference),
p_value_biparietal_diameter = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_biparietal_diameter,
TRUE ~ p_value_biparietal_diameter),
p_value_femur_length = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_femur_length,
TRUE ~ p_value_femur_length),
p_value_birth_weight = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_birth_weight,
TRUE ~ p_value_birth_weight),
p_value_birth_length = dplyr::case_when(
stringr::str_detect(exposure, "Bisphenol S|Butyl") ~ p_value_main_eff_birth_length,
TRUE ~ p_value_birth_length)) %>%
dplyr::select(-contains(c("int_sign", "contrast", "main_eff")))
Appendix_Table_7 <- res_exam_dates
utils::write.csv(Appendix_Table_7, here::here(path_main, "tables/Appendix_Table_7.csv"), row.names = FALSE)
Appendix_Table_7
# Load data
# Information on the anthropometric measures
bdd_grossesse <- haven::read_stata(here::here("data/raw_data/bdd_grossesse_v4_1.dta")) # replaced the old database bdd_grossesse_v4.dta with a new version provided by Karine Supernant
# US dataset with missing values
us_data_for_missing <- readr::read_csv(here::here("data/us_data_for_missing_calculations.csv"))
# Head circumference a few days after birth (not at birth)
head_cir <- haven::read_sas(here::here("data/raw_data/questcy1caf_20210907.sas7bdat"))
pop_smoke_expo <- readRDS(here::here(path_main,"pop_smoke_expo.RDS"))
pop_smoke_expo_miss <- readRDS(here::here(path_main, "data/pop_smoke_expo_miss.RDS"))
# Load data
# Information on the anthropometric measures
bdd_grossesse <- haven::read_stata(here::here("data/raw_data/bdd_grossesse_v4_1.dta")) # replaced the old database bdd_grossesse_v4.dta with a new version provided by Karine Supernant
# US dataset with missing values
us_data_for_missing <- readr::read_csv(here::here("data/us_data_for_missing_calculations.csv"))
# Head circumference a few days after birth (not at birth)
head_cir <- haven::read_sas(here::here("data/raw_data/questcy1caf_20210907.sas7bdat"))
pop_smoke_expo <- readRDS(here::here(path_main,"pop_smoke_expo.RDS"))
pop_smoke_expo_miss <- readRDS(here::here(path_main, "pop_smoke_expo_miss.RDS"))
# Display missing values for T2 and T3
ultrasound_data_miss <- us_data_for_missing %>%
dplyr::select(ident:trimester) %>%
dplyr::filter(trimester != "T1")
miss_no <- apply(ultrasound_data_miss, 1, function(x) sum(is.na(x)))
ultrasound_data_miss <- cbind(ultrasound_data_miss, miss_no)
cov_data <- dplyr::select(bdd_grossesse, ident, po_hc) %>%
dplyr::left_join(dplyr::select(head_cir, ident, cy1caf1_q09), by = "ident") %>%
dplyr::rename(head_circumference = po_hc,
head_cir_later = cy1caf1_q09)
# outlier by error
cov_data[which.min(cov_data$head_cir_later), ] # it is not possible that head cir dropped after birth to 80 mm (3 times)
summary(cov_data$head_circumference)
summary(cov_data$head_cir_later) # 242 NAs, 1 error
cov_data$head_cir_later[cov_data$head_cir_later == 80] <- NA
spearman_cor <- stats::cor(cov_data$head_circumference, cov_data$head_cir_later, use = "complete.obs", method = "spearman")
ggplot2::ggplot(stats::na.omit(cov_data), ggplot2::aes(head_circumference, head_cir_later)) +
ggplot2::geom_jitter(shape = 21, size = 3, fill = "lightblue", color = "darkred") +
ggplot2::theme_bw() +
ggplot2::ggtitle(paste0("Spearman rho = ", round(spearman_cor, 2), ", n = 189")) +
ggplot2::xlab("HC at birth") +
ggplot2::ylab("HC after birth")
sessioninfo
sessioninfo()
sessionInfo()
#
# # Regression calibration uses information from both t2 and t3 exposure (and the chronological order of exposure sampling does not matter, so both t2 and t3 can be replicates). This means that N for US2 will be higher than for the uncorrected models that take into account only information from t2 (in contrast to US3 and birth that use information from the averaged T2 and T3, so N will be equal with regression calibration). Therefore, for US2 the IDs for uncorrected models will be unified based on N for any exposure per outcome (as there is no difference in N between phenols, it is only different in regard to the outcome)
#
# Second trimester
regr_calibration_US2 <- RegrCalibration(outcomes = outcomes_US2_US3,
exposures = expo_names_nocat,
data = US2_data,
confounders = confounders,
confounders_dummy = paste(c(confounders_num, confounders_cat)),
method = "mle",
seed = seed,
B = 1,
US2 = TRUE) %>%
# This 'US2' argument will allow to correct the inflated N
# (see above for explanation)
dplyr::mutate(trimester = "US2")
# # Set a seed
seed <- 632739
#
# # Regression calibration uses information from both t2 and t3 exposure (and the chronological order of exposure sampling does not matter, so both t2 and t3 can be replicates). This means that N for US2 will be higher than for the uncorrected models that take into account only information from t2 (in contrast to US3 and birth that use information from the averaged T2 and T3, so N will be equal with regression calibration). Therefore, for US2 the IDs for uncorrected models will be unified based on N for any exposure per outcome (as there is no difference in N between phenols, it is only different in regard to the outcome)
#
# Second trimester
regr_calibration_US2 <- RegrCalibration(outcomes = outcomes_US2_US3,
exposures = expo_names_nocat,
data = US2_data,
confounders = confounders,
confounders_dummy = paste(c(confounders_num, confounders_cat)),
method = "mle",
seed = seed,
B = 1,
US2 = TRUE) %>%
# This 'US2' argument will allow to correct the inflated N
# (see above for explanation)
dplyr::mutate(trimester = "US2")
renv::snapshot()
renv::status()
renv::restore()
renv::snapshot()
knitr::opts_chunk$set(echo = TRUE)
# Create a path to save output files
path_main <- "results/phenols" # main analyses of the paper
# Load packages
library("tidyverse")
source("R/UsoundDataCreation.R")
source("R/DataPreparation.R")
source("R/DescriptiveAnalysis.R")
source("R/Figures.R")
source("R/StatModels.R")
# Load datasets
# Information on the anthropometric measures
bdd_grossesse <- haven::read_stata(here::here("data/raw_data/bdd_grossesse_v4_1.dta")) # replaced the old database bdd_grossesse_v4.dta with a new version provided by Karine Supernant
knitr::opts_chunk$set(echo = TRUE)
# Create a path to save output files
path_main <- "results/phenols" # main analyses of the paper
# Load packages
library("tidyverse")
source("R/UsoundDataCreation.R")
source("R/DataPreparation.R")
source("R/DescriptiveAnalysis.R")
source("R/Figures.R")
source("R/StatModels.R")
# Load datasets
# Information on the anthropometric measures
bdd_grossesse <- haven::read_stata(here::here("data/raw_data/bdd_grossesse_v4_1.dta")) # replaced the old database bdd_grossesse_v4.dta with a new version provided by Karine Supernant
samples <- readr::read_csv(here::here("data/raw_data/phenols_phthalates_pregnancy_mr_2020-03-26_448.csv")) # sent by Claire Philippat 26/02/2021 by email
tobacco <- haven::read_stata(here::here("data/raw_data/tobaccopregnancy_ag_20201218_16_copy.dta")) %>%
dplyr::mutate(ident = as.character(ident)) # produced by Ariane Guilbert in December 2020 and sent by her by email 22/02/2021
ultrasound_manual <- haven::read_stata(here::here("data/raw_data/donnees_echo_saisies_quest_mt1caj1.dta")) # we confirmed with Sarah Lyon-Caen 25/02/2021 on Slack, that this is the final dataset
limits <- readr::read_csv(here::here("data/raw_data/limits_data_2022-01-24.csv")) # sent by Matthieu Rolland
# Manually create the variables names
# Full names of exposure variables
exposures_long <- c("Bisphenol A", "Bisphenol S", "Triclosan", "Benzophenone-3", "Butylparaben", "Ethylparaben", "Methylparaben", "Propylparaben")
# Full names of continuous exposure variables
exposures_long_nocat <- c("Bisphenol A", "Triclosan", "Benzophenone-3", "Ethylparaben", "Methylparaben", "Propylparaben")
# Full names of categorical exposure variables
exposures_long_cat <- c("Bisphenol S", "Butylparaben")
# Short names of exposure variables as used in the databases
expo_names <- c("log_BPA", "log_TCS", "log_BP3", "log_ETPA", "log_MEPA", "log_PRPA", "cat_BPS", "cat_BUPA")
# Short names of exposures that do not include not standardized exposures (TCS, BUPA and BPS)
expo_names_nosd <- c("log_BPA", "log_BP3", "log_ETPA", "log_MEPA", "log_PRPA")
# Extract individuals' IDs
id_list <- samples %>%
pull(ident) %>%
unique() %>%
sort()
# * Create population characteristics data ---- 479 x 9
pop_data <- CreatePopData(covariates_data = bdd_grossesse,
expo_data = samples)
# * Create tobacco data ---- 484 x 2
smoke_data <- CreateSmokeData(tobacco_data = tobacco)
# * Create birth outcomes data ---- 1,437 x 5
birth_data <- CreateBirthOutcomes(covariates_data = bdd_grossesse,
pop_data = pop_data)
# * Create exposure data ---- 479 x 49
expo_data <- CreateExpoData(expo_data = samples)
# * Create ultrasound data ---- 4,604 x 11
ultrasound_long <- CreateUsoundDdata(bdd_grossesse = bdd_grossesse,
ultrasound_manual_data = ultrasound_manual)
# * Create population, smoking and exposure dataset ---- 479 x 58
pop_smoke_expo_miss <- pop_data %>%
left_join(smoke_data, by = "ident") %>%
left_join(expo_data, by = "ident")
# Save dataset for sensitivity analyses
saveRDS(pop_smoke_expo_miss, here::here(path_main, "pop_smoke_expo_miss.RDS"))
pop_smoke_expo <- ImputeMissingCov(data_w_missing = pop_smoke_expo_miss)
# Save dataset for sensitivity analyses
saveRDS(pop_smoke_expo, here::here(path_main, "pop_smoke_expo.RDS"))
# *  Create all outcomes data ---- 4,933 x 11
# All outcomes for patients with at least one sample and T2 and T3 (not T1)
outcomes_long <- bind_rows(birth_data, ultrasound_long) %>%
filter(ident %in% id_list & trimester != "US1") %>%
filter(keep_flag | trimester == "birth")
# * Create model data ---- 4,933 x 68
model_data <- outcomes_long %>%
left_join(pop_smoke_expo, by = "ident") %>%
# standardise outcome vals
dplyr::group_by(outcome, trimester) %>%
dplyr::mutate(outcome_val_sd = outcome_val / sd(outcome_val, na.rm = TRUE)) %>%
dplyr::ungroup()
# Save the output for sensitivity analysis
saveRDS(model_data, here::here(path_main, "model_data.RDS"))
# Define continues exposure variables to be transformed to long format ---- n = 28
cols_to_long_cont <- ColsToLong(x = expo_names[!str_detect(expo_names, "cat")],
y = expo_names_nosd[!str_detect(expo_names_nosd, "cat")])
# Define continues exposure variables to be transformed to long format ---- n = 6
cols_to_long_cat <- ColsToLong(x = expo_names[str_detect(expo_names, "cat")])
# Create dataset in a long format for continues exposure variables ---- 138,124 x 18
model_data_long_cont <- ModelDataAllVarsLong(model_data = model_data,
cols_to_long = cols_to_long_cont)
# Save the output for sensitivity analysis
saveRDS(model_data_long_cont, here::here(path_main, "model_data_long_cont.RDS"))
# Create dataset in a long format for categorical exposure variables ---- 29,598 x 18
model_data_long_cat <- ModelDataAllVarsLong(model_data = model_data,
cols_to_long = cols_to_long_cat)
# Remove non-standardized exposures, T2&T3 averaged exposure predicting T2, and T2 exposure predicting T3 and birth
model_data_long_main_cont <- RemoveConditions(model_data_long_cont) # 29,598 x 18
model_data_long_main_cat <- RemoveConditions(model_data_long_cat) # 9,866 x 18
# Save the outputs for sensitivity analysis
saveRDS(model_data_long_main_cont, here::here(path_main, "model_data_long_main_cont.RDS"))
saveRDS(model_data_long_main_cat, here::here(path_main, "model_data_long_main_cat.RDS"))
# Print population characteristics
(pop_char <- PopulationCharacteristics(
cov_expo_data = pop_smoke_expo_miss,
path = path_main,
file_name = "population_characteristics"))
# Exposure descriptive statistics for non standardized exposures
(exp_desc <- ExposureCharacteristics(expo_data = samples,
limits = limits))
# Print the detection rates per exposure per trimester
dplyr::select(exp_desc, compound, dplyr::contains("pct_")) %>%
tidyr::pivot_longer(cols = -compound,
names_to = "pct",
values_to = "pct_val") %>%
dplyr::mutate(pct_val = round(pct_val)) %>%
dplyr::arrange(pct_val) # The detection rate for BUPA: 24%, BPS: 25%, rest: 81%.
# Run linear regressions for continuous exposures
model_output_cont <- ComputeGrowthModels(model_data_long = model_data_long_main_cont) # 66 tests x 12
model_tab_cont <- sapply(X = exposures_long_nocat,
FUN = PrintTab,
model_output = model_output_cont,
simplify = FALSE,
USE.NAMES = TRUE)
# Tidy the results
res_cont <- purrr::map_df(model_tab_cont, ~as.data.frame(.x), .id = "exposure") %>%
dplyr::mutate(term = factor(term,
levels = "exp_val",
labels = "Continuous"))
# Run linear regressions for categorical exposures
model_output_cat <- ComputeGrowthModels(model_data_long = model_data_long_main_cat,
cat = TRUE) # 44 tests x 12
model_tab_cat <- sapply(X = exposures_long_cat,
FUN = PrintTab,
model_output = model_output_cat,
cat = TRUE,
simplify = FALSE,
USE.NAMES = TRUE)
# Tidy the results
res_cat <- purrr::map_df(model_tab_cat, ~as.data.frame(.x), .id = "exposure") %>%
dplyr::mutate(term = substring(term, 8),
term = factor(term, levels = c("LOD-LOQ", ">LOQ"))) %>%
dplyr::arrange(exposure, tri_out, term)
# Merge the results for continuous and categorical exposures
res_combined <- dplyr::bind_rows(res_cont, res_cat)
saveRDS(res_combined, here::here(path_main, "res_combined.RDS"))
# Run linear regressions for continuous exposures including interaction term between exposure and child sex
model_output_inter_cont <- ComputeGrowthModels(model_data_long = model_data_long_main_cont, sex = TRUE)
model_tab_inter_cont <- sapply(X = exposures_long_nocat, FUN = PrintTab, model_output = model_output_inter_cont, sex = TRUE, simplify = FALSE, USE.NAMES = TRUE)
# Tidy the results
res_inter_cont <- purrr::map_df(model_tab_inter_cont, ~as.data.frame(.x), .id = "exposure")
# Run linear regressions for acegorical exposures including interaction term between exposure and child sex
model_output_inter_cat <- ComputeGrowthModels(model_data_long = model_data_long_main_cat, cat = TRUE, sex = TRUE)
model_tab_inter_cat <- sapply(X = exposures_long_cat, FUN = PrintTab, model_output = model_output_inter_cat, cat = TRUE, sex = TRUE, simplify = FALSE, USE.NAMES = TRUE)
# Tidy the results
res_inter_cat <- purrr::map_df(model_tab_inter_cat, ~as.data.frame(.x), .id = "exposure")
# Merge the results and save for sensitivity analysis
res_inter <- dplyr::bind_rows(res_inter_cont, res_inter_cat)
saveRDS(res_inter, here::here(path_main, "res_inter.RDS"))
Table_1 <- utils::read.csv(here::here(path_main, "population_characteristics.csv")) %>%
as.data.frame()
colnames(Table_1) <- c("Characteristic", "Distribution", "N")
utils::write.csv(Table_1, here::here(path_main, "tables/Table_1.csv"), row.names = FALSE)
Table_1
Table_2 <- exp_desc
utils::write.csv(Table_2, here::here(path_main, "tables/Table_2.csv"), row.names = FALSE)
Table_2
PlotModel(model_cont = model_output_cont,
model_cat = model_output_cat,
plot_title = "",
ncol = length(exposures_long))
ggplot2::ggsave(here::here(path_main, "figures/Figure_1.tiff"),
scale = 1/90,
height = 600,
width = 1300)
model_cont <- model_output_inter_cont %>%
# Pick only those exposures for which interactions were detected
dplyr::filter(stringr::str_detect(exp, "BPA|BP3|ETPA"))
model_cat <- model_output_inter_cat %>%
# Pick only those exposures for which interactions were detected
dplyr::filter(stringr::str_detect(exp, "BUPA"))
PlotModel(model_cont = model_cont,
model_cat = model_cat,
plot_title = "",
sex = TRUE,
ncol = length(exposures_long))
ggplot2::ggsave(here::here(path_main, "figures/Figure_2.tiff"),
scale = 1/90,
height = 600,
width = 1300,
dpi = 150)
